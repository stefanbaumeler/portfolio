@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass:meta';

@use 'vars' as *;

@mixin breakpoint($size) {
    @media screen and (min-width: map.get($breakpoints, $size)) {
        @content;
    }
}

@mixin h1 {
    font-size: 40px;
    line-height: 1.3;

    @include breakpoint(xs) {
        font-size: 64px;
    }

    @include breakpoint(md) {
        font-size: 98px;
    }
}

@mixin h2 {
    font-size: 24px;
    line-height: 1.3;

    @include breakpoint(xs) {
        font-size: 32px;
    }

    @include breakpoint(md) {
        font-size: 48px;
    }
}

@mixin h3 {
    font-size: 20px;
    line-height: 1.3;

    @include breakpoint(xs) {
        font-size: 26px;
    }

    @include breakpoint(md) {
        font-size: 30px;
    }
}

@mixin h4 {
    font-size: 16px;
    line-height: 1.3;

    @include breakpoint(xs) {
        font-size: 20px;
    }

    @include breakpoint(md) {
        font-size: 24px;
    }
}

@mixin text {
    color: var(--c-gray-darkest);
    font-size: 16px;
    line-height: 27px;
    font-weight: 300;

    @include breakpoint(md) {
        font-size: 18px;
        line-height: 30px;
    }
}

@mixin text-small {
    font-size: 16px;
    line-height: 25.6px;
    font-weight: 300;
}

@mixin tooltip {
    color: var(--c-white);
    background-color: var(--c-gray-darkest);
    padding: 6px 12px;
    font-size: 14px;
    border-radius: 4px;
    text-wrap: nowrap;
    transition: opacity .25s;

    @media screen and (pointer:coarse) {
        display: none;
    }
}

@mixin container {
    position: relative;
    z-index: 2;
    padding: 50px 10px;
    max-width: 1600px;
    margin: 0 auto;
    box-sizing: border-box;
    width: 100%;

    @include breakpoint(xs) {
        padding: 100px 25px 50px;
    }

    @include breakpoint(md) {
        padding: 120px 50px 50px;
    }
}

@mixin wysiwyg {
    *:not(.shiki):not(:has(.shiki)) > code {
        white-space: nowrap;
        padding: 3px 5px;
        background-color: $color-white;
        border-radius: 4px;
        color: #D73A49;
        font-family: 'JetBrains Mono', monospace;
        font-size: 14px;

        @include breakpoint(md) {
            font-size: 16px;
        }

        @at-root .body--dark & {
            background-color: #24292E;
            color: #F97583;
        }
    }

    a {
        color: var(--c-main-dark);

        @at-root .body--dark & {
            color: var(--c-main);
        }
    }

    ol,
    ul,
    pre {
        margin: 0 0 1em;

        &:last-child {
            margin-bottom: 0;
        }
    }

    ul li {
        position: relative;
        padding-left: 30px;

        &:before {
            content: '';
            position: absolute;
            top: 13.5px;
            height: 1px;
            width: 20px;
            background-color: var(--c-gray);
            left: 0;
        }
    }

    ol li {
        padding-left: 10px;
    }
}

@mixin code {
    code {
        font-family: 'JetBrains Mono', monospace;
        white-space: pre-wrap;
    }

    pre {
        tab-size: 4;
        font-size: 16px;
        line-height: 20px;
        padding: 20px;
        border-radius: 8px;

        @include breakpoint(md) {
            font-size: 16px;
            line-height: 24px;
        }
    }
}

@function to-number($value) {
    $result: 0;
    $digits: 0;
    $minus: string.slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
    $from: 1;

    @if $minus {
        $from: 2;
    }

    @if meta.type-of($value) == 'number' {
        @return $value;
    } @else if meta.type-of($value) != 'string' {
        @error 'Value for `to-number` should be a number or a string.';
    }

    @for $i from $from through string.length($value) {
        $character: string.slice($value, $i, $i);

        @if list.index(map.keys($numbers), $character) or $character == '.' {
            @if $character == '.' {
                $digits: 1;
            } @else if $digits == 0 {
                $result: $result * 10 + map.get($numbers, $character);
            } @else {
                $digits: $digits * 10;
                $result: $result + map.get($numbers, $character) / $digits;
            }
        }
    }

    @if $minus {
        @return -$result;
    }

    @return $result;
}

@mixin face($name, $filetypes: woff2, $styles: 400 400i 700 700i) {
    $font-path: '../fonts/';

    @each $style in $styles {
        @font-face {
            $srcs: [];

            font-family: $name;

            @if list.index($filetypes, eot) {
                src: url('#{$font-path}#{$name}-#{$style}.eot');
            }

            @each $filetype in $filetypes {
                @if $filetype == eot {
                    $srcs: list.join($srcs, url('#{$font-path}#{$name}-#{$style}.#{$filetype}?#iefix') + ' ' + format('embedded-opentype'), $separator: comma, $bracketed: false);
                } @else {
                    $srcs: list.join($srcs, url('#{$font-path}#{$name}-#{$style}.#{$filetype}') + ' ' + format('#{$filetype}'), $separator: comma, $bracketed: false);
                }
            }

            src: $srcs;

            @if string.index('' + $style, i) {
                font-style: italic;
                font-weight: to-number(string.slice('' + $style, 1, 3));
            } @else {
                font-weight: $style;
            }
        }
    }
}

@mixin button($color: $color-main, $color-hover: $color-main-light) {
    background-color: $color;
    padding: 16px 32px;
    color: $color-white;
    margin-top: 25px;
    transition: box-shadow .25s, background-color .25s;
    border-radius: 4px;
    font-weight: 700;
    display: inline-flex;
    gap: 10px;

    &:has(svg) {
        padding-left: 16px;
        padding-right: 16px;
    }

    > svg {
        width: 20px;
    }


    &:hover {
        box-shadow: 0 20px 48px 0 rgba($color-black, .1);
        background-color: $color-hover;
    }
}
